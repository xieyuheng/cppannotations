A member function of a given class is always called in combination with an
object of its class. There is always an implicit `substrate' for the function
to act on. bf(C++) defines a keyword, ti(this), to reach this substrate.

The tt(this) keyword is a pointer variable that always contains the
address
 hi(object: address) hi(address of objects) of the object for which the member
function was called. The tt(this) pointer is implicitly declared by each
member function (whether tt(public, protected), or tt(private)). The tt(this)
pointer is a constant pointer to an object of the member function's
class. For example, the members of the class tt(Person) implicitly declare:
        verb(
    extern Person *const this;
        )
    A member function like tt(Person::name) could be implemented in two ways:
with or without using the tt(this) pointer:
        verb(
    char const *Person::name() const    // implicitly using `this'
    {
        return d_name;
    }

    char const *Person::name() const    // explicitly using `this'
    {
        return this->d_name;
    }
        )
    The tt(this) pointer is seldom explicitly used, but situations do exist
where the tt(this) pointer is actually required (cf. chapter
ref(PointMembers)).
