Now that tt(Multi) and its support templates have been developed, how can a
tt(Multi) be used?

A word of warning is in place. To reduce the size of the developed classes
they were designed in a minimalist way. For example, the tt(get) function
template cannot be used with tt(Multi const) objects and there is no default,
or move constructor available for tt(Multi) types. tt(Multi) was designed to
illustrate some of the possibilities of template meta programming and
hopefully tt(Multi)'s implementation served that purpose well. But can it be
used? If so, how?

This section provides some annotated examples. They may be concatenated to
define a series of statements that could be placed in a tt(main) function's
body, which would result in a working program.

    itemization(
    it() A simple tt(Policy) could be defined:
        verbinclude(//POLICY examples/multi.cc)
    tt(Policy) defines a data member and it can be used to define tt(Multi)
objects:
        verbinclude(//ONE examples/multi.cc)

    it() To obtain the number of types defined by a tt(Multi) class or object
    either use the tt(::size) enum value (using the tt(Multi) class) or the
tt(.size) member (using the tt(Multi) object):
        verbinclude(//TWO examples/multi.cc)

    it() Variables of constituting types can be defined using tt(plainTypeAt):
        verbinclude(//THREE examples/multi.cc)

    it() Raw static casts can be used to obtain the constituent type:
        verbinclude(//FIVE examples/multi.cc)

    it() However, this won't work when the template parameter pack contains
identical types, as a cast can't distinguish between identical
tt(Policy<Type>) types. In that case tt(get) still works fine:
        verbinclude(//SIX examples/multi.cc)

    it() Here is an example wrapping a tt(std::vector) in a tt(Vector):
        verbinclude(//SEVEN examples/multi.cc)

    it() Such a vector can be defined by its tt(Multi) type:
        verbinclude(//EIGHT examples/multi.cc)

    it() Knowing that a tt(Vector) is a tt(std::vector), the reference
returned by tt(get) support index operators that can be used as left hand side
or right hand side operands:
        verbinclude(//NINE examples/multi.cc)
    )
