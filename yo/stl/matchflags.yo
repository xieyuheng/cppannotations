All overloaded tt(format) members and all regular expression matching
functions accept a final
tt(regex_constants::match_flag_type)hi(match_flag_type) argument, which is a
bit-masked type, for which the tt(bit_or) operator can be used. All tt(format)
members by default specify the argument tt(match_default).

The tt(match_flag_type) enumeration defines the following values (below,
`rangett(first, last)' refers to the character sequence being matched).

itemization(
iti(format_default) (not a bit-mask value, but a default value which is
	equal to 0). With just this specification ECMAScript rules are used to
	construct strings in tt(std::regex_replace);

iti(format_first_only): tt(std::regex_replace) only replaces the first
	match;

iti(format_no_copy): non-matching strings are not passed to the output
	by tt(std::regex_replace);

iti(format_sed):  POSIX bf(sed)(1) rules are used to construct strings in
	tt(std::regex_replace);

iti(match_any): if multiple matches are possible, then any match is an
	acceptable result;

iti(match_continuous): sub-sequences are only matching if they start at
	tt(first); 

iti(match_not_bol): the first character in rangett(first, last) is treated
	as an ordinary character:  tt(^) does not match rangett(first, first);

iti(match_not_bow): tt(\b) does not match rangett(first, first);

iti(match_default) (not a bit-mask value, but equal to 0): the default
    value of the final argument that's passed to the regular expression
    matching functions and tt(match_results::format) member. ECMAScript
	rules are used to construct strings in tt(std::regex_replace);

iti(match_not_eol): the last character in rangett(first, last) is treated
	as an ordinary character: tt($) does not match rangett(last,last);

iti(match_not_eow): tt(\b) does  not match rangett(last, last);

iti(match_not_null): empty sequences are not considered matches;

iti(match_prev_avail): tt(--first) refers to a valid character
	position. When specified tt(match_not_bol) and tt(match_not_bow) are
	ignored;
)
