Template member functions must be known to the compiler when the template is
instantiated. The current i(Gnu) i(g++) i(compiler) does not support
    i(precompiled class templates), therefore the member functions of
templates are i(inline) functions. They can be defined inside the template
interface or outside the template interface. Inline template member functions
are defined in the same way as inline member hi(template member function)
functions of ordinary classes. However, for the
member functions that are defined outside of the template's interface
    hi(definition: template member function)
    itemization(
    it() No em(inline) keyword is required in the interface,
    it() A tt(template <template parameter list>) definition is required.
    )
    In the link(Vector)(BVECTOR) class template a member function
        verb(        Type &operator[](size_t index))
    could be declared. When defined outside of the template's interface, its
implementation would be:
        verbinclude(-a vector/pushback.cc)
    Note the fact that the class type of tt(operator[]()) is the generic
tt(Vector<T>) type. The abstract data type tt(T) is used to define the
type of the return value of the member function.
