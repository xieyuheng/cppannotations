    The partial specialization for a tt(MatrixColumn) is constructed
similarly. Let's present its highlights (the full tt(Matrix) class template
definition as well as all its specializations are provided in the
tt(cplusplus.yo.zip) archive (that can be obtained from the annotations()' 
url(Github)
(https://fbb-git.github.io/cppannotations/) website) in the
file tt(yo/classtemplates/examples/matrix.h)):
    itemization(
    it() The class template partial specialization once again starts with a
template header. Now the class interface specifies a fixed value for the
second template parameter of the generic class template. This illustrates that
we can construct partial specializations for every single template parameter;
not just for the first or the last:
        verbinclude(//MATRIXCOLUMN examples/matrix.h)
    it() Its constructors are implemented completely analogously to the way
the tt(MatrixRow) constructors were implemented. Their implementations are
left as an exercise to the reader (and they can be found in tt(matrix.h)).
    it() An additional member tt(sum) is defined to compute the sum of the
elements of a tt(MatrixColumn) vector. It's simply implemented
using the tt(accumulate) generic algorithm:
        verbinclude(//SUMCOLUMN examples/matrix.h)
    )
