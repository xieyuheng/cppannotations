In cases where the data stored in the classes derived from the polymorphic
base class may either or not be mutable by the parser, there must be a way to
indicate so when the derived class is created. Two small support structs
define tt(isMutable) enum values indicating whether the data should be
considered mutable or not. To make matters concrete, let's assume that we'll
need tt(INT) and tt(TEXT) semantic values to be immutable, while tt(VECTOR)
semantic values need to be mutable. Here are these structs, defined in the
anonymous namespace within tt(sembase.h):
        verbinclude(//MUTABLE poly2/sembase/sembase.h)
